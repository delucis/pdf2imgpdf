#!/bin/bash

print_color () { tput sgr 0 1; tput bold; printf "$1"; tput sgr0; }
println_color () { print_color "$1"; printf "\n"; }

print_help () {
  println_color "Usage:"
  printf "  pdf2imgpdf [options ...] file|directory \n\n"
  println_color "Options:"
  printf "  -h                display this help message\n"
  printf "  -o directory      the name of the directory to save your ouput PDFs to (default: img-pdfs)\n"
  printf "  -p prefix         a prefix to add to the filename of your output PDFs\n"
  printf "  -s suffix         a suffix to add to the filename of your output PDFs\n"
  printf "  -v                print the current version number to the Terminal window\n\n"
  println_color "Examples:"
  printf "  Process all the PDFs in the directory 'old-pdfs', saving them to the directory 'new-pdfs'\n"
  printf "  with the prefix 'Copy of ' in front of their original file name:\n\n"
  printf "        pdf2imgpdf -o new-pdfs -p \"Copy of \" old-pdfs \n\n\n"
  printf "  Process 'my-document.pdf', saving it to the current directory with the suffix '-processed':\n\n"
  printf "        pdf2imgpdf -o . -s -processed my-document.pdf \n\n\n"
}

process_pdf () {
  # Make sure there’s an argument provided
  if [ -z "$1" ]; then
    echo "Error: no filename supplied."
    exit 1
  fi

  SOURCEFILE=$1

  # Make sure the file is a PDF
  FILETYPE="$(file --mime-type -b "$SOURCEFILE")"
  if [ ! "$FILETYPE" == "$MIMETYPE" ]; then
    echo "$SOURCEFILE is not a PDF file."
  fi

  # Create a directory to hold extracted images
  if [ ! -d "$IMGDIR" ]; then
    mkdir "$IMGDIR"
  else
    rm -R "${IMGDIR:?}/*"
  fi

  # Get file name from input path
  FILE="${SOURCEFILE##*/}"                      # remove path
  FILENAME=$(echo "$FILE" | cut -f 1 -d '.')    # remove extension

  println_color "$FILE"
  echo "    Converting PDF pages to images..."
  pdftoppm -png "$SOURCEFILE" "${IMGDIR}/out"

  echo "    Converting images to PDF..."
  cd "$IMGDIR" || exit 1
  convert $( ls ) "../${OUTDIR}/${PREFIX}${FILENAME}${SUFFIX}.pdf"
  cd ../ || exit 1

  # Tidy up, removing generated images
  rm -R "$IMGDIR"
}

VERSION="1.1.0"
IMGDIR=".pdf2imgpdfTemp"
OUTDIR="img-pdfs"
PREFIX=""
SUFFIX=""
MIMETYPE="application/pdf"

# Check all required CLIs are available
dependencies=( pdftoppm convert )
for dependency in "${dependencies[@]}"; do
  command -v $dependency >/dev/null 2>&1 || { echo >&2 "‘$dependency’ command is required but it’s not installed. Aborting."; exit 1; }
done

while getopts "o:p:s:vh" opt; do
  case ${opt} in
    o) OUTDIR="$OPTARG" ;;
    p) PREFIX="$OPTARG" ;;
    s) SUFFIX="$OPTARG" ;;
    v) echo "$VERSION" >&1; exit ;;
    h) print_help; exit ;;
    :) echo "Error: option -$OPTARG requires an argument." >&2; exit 1 ;;
    \?) echo "Try 'pdf2imgpdf -h' for more information." >&2; exit 1 ;;
  esac
done

shift $((OPTIND-1))

# Make sure there’s an argument provided
if [ -z "$1" ]; then
  echo "Error: no filename or directory supplied."
  exit 1
fi

TARGET=$1

# Create a directory to hold output PDFs
if [ ! -d "$OUTDIR" ]; then
  mkdir "$OUTDIR"
fi

if [[ -d "$TARGET" ]]; then
  for file in $TARGET/*.pdf; do
    process_pdf "$file"
  done
elif [[ -f $TARGET ]]; then
  process_pdf "$TARGET"
else
  echo "Error: $TARGET is not a file or a directory."
  exit 1
fi
